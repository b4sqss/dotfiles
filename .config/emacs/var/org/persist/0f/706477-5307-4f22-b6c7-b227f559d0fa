(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #4=(headline (:raw-value #1="Intro" :begin 585 :end 5925 :pre-blank 0 :contents-begin 593 :contents-end 5924 :robust-begin 595 :robust-end 5922 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 585 :title #1# :mode nil :granularity element :cached t :parent #8=(org-data (:begin 1 :contents-begin 1 :contents-end 112085 :end 112085 :robust-begin 3 :robust-end 112083 :post-blank 0 :post-affiliated 1 :path "/Users/basqs/.config/nyoom.emacs/doom/config.org" :mode org-data :CATEGORY "config" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #81=(headline (:raw-value #2="The enveloping editor" :begin 4751 :end 5727 :pre-blank 0 :contents-begin 4777 :contents-end 5726 :robust-begin 4779 :robust-end 5724 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4751 :title #2# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5=(headline (:raw-value #3="Why Emacs?" :begin 3579 :end 5727 :pre-blank 0 :contents-begin 3593 :contents-end 5726 :robust-begin 3595 :robust-end 5724 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3579 :title #3# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #4#)))) 0] #5# 0] [nil [nil nil #12=(headline (:raw-value #6="Modules" :begin 5946 :end 16042 :pre-blank 0 :contents-begin 5957 :contents-end 16041 :robust-begin 6011 :robust-end 16039 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5946 :HEADER-ARGS:EMACS-LISP ":tangle no" :title #6# :mode section :granularity element :cached t :parent #9=(headline (:raw-value #7="Doom Configuration" :begin 5925 :end 18004 :pre-blank 0 :contents-begin 5946 :contents-end 18003 :robust-begin 5948 :robust-end 18001 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5925 :title #7# :mode nil :granularity element :cached t :parent #8# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #9# 1] #83=(headline (:raw-value #10="Notes for the unwary adventurer" :begin 5727 :end 5925 :pre-blank 0 :contents-begin 5762 :contents-end 5924 :robust-begin 5764 :robust-end 5922 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5727 :title #10# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #4#)) 0] [[nil nil #85=(headline (:raw-value #11="Interface" :begin 7571 :end 10770 :pre-blank 0 :contents-begin 7587 :contents-end 10769 :robust-begin 7589 :robust-end 10767 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7571 :title #11# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #12#)) 0] [nil nil #90=(headline (:raw-value #13="Everything in Emacs" :begin 15498 :end 16042 :pre-blank 0 :contents-begin 15524 :contents-end 16041 :robust-begin 15526 :robust-end 16039 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15498 :title #13# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #12#)) 0] #89=(headline (:raw-value #14="Language support" :begin 10770 :end 15498 :pre-blank 0 :contents-begin 10793 :contents-end 15497 :robust-begin 10795 :robust-end 15495 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10770 :title #14# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #12#)) 0] #86=(headline (:raw-value #15="Structure" :begin 7076 :end 7571 :pre-blank 0 :contents-begin 7092 :contents-end 7570 :robust-begin 7094 :robust-end 7568 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7076 :title #15# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #12#)) -1] [[[[nil nil #93=(headline (:raw-value #16="Org:" :begin 16484 :end 16823 :pre-blank 0 :contents-begin 16495 :contents-end 16822 :robust-begin 16497 :robust-end 16820 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16484 :title #16# :mode nil :granularity element :cached t :parent #19=(headline (:raw-value #17="Packages" :begin 16042 :end 18004 :pre-blank 0 :contents-begin 16054 :contents-end 18003 :robust-begin 16108 :robust-end 18001 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16042 :HEADER-ARGS:EMACS-LISP ":tangle no" :title #17# :mode nil :granularity element :cached t :parent #9# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [[nil nil #95=(headline (:raw-value #18="Looks:" :begin 17114 :end 17450 :pre-blank 0 :contents-begin 17127 :contents-end 17449 :robust-begin 17129 :robust-end 17447 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17114 :title #18# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 0] nil #98=(headline (:raw-value #20="Emacs Tweaks:" :begin 17450 :end 17818 :pre-blank 0 :contents-begin 17470 :contents-end 17817 :robust-begin 17472 :robust-end 17815 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17450 :title #20# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) -1] #97=(headline (:raw-value #21="$\\LaTeX$:" :begin 16823 :end 17114 :pre-blank 0 :contents-begin 16839 :contents-end 17113 :robust-begin 16841 :robust-end 17111 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16823 :title #21# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 1] [[nil nil #24=(headline (:raw-value #22="Basic Configuration" :begin 18004 :end 25332 :pre-blank 0 :contents-begin 18026 :contents-end 25331 :robust-begin 18028 :robust-end 25329 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18004 :title #22# :mode nil :granularity element :cached t :parent #8# :org-element--cache-sync-key nil)) 0] [nil nil #106=(headline (:raw-value #23="Shell" :begin 18822 :end 19792 :pre-blank 0 :contents-begin 18831 :contents-end 19791 :robust-begin 18833 :robust-end 19789 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18822 :title #23# :mode nil :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) 0] #104=(headline (:raw-value #25="Customizations" :begin 18026 :end 18299 :pre-blank 0 :contents-begin 18044 :contents-end 18298 :robust-begin 18046 :robust-end 18296 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18026 :title #25# :mode section :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) 0] #102=(headline (:raw-value #26="Fun:" :begin 17818 :end 18004 :pre-blank 0 :contents-begin 17829 :contents-end 18003 :robust-begin 17831 :robust-end 18001 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17818 :title #26# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) -1] [[[nil nil #30=(headline (:raw-value #27="LSP" :begin 20307 :end 21190 :pre-blank 0 :contents-begin 20314 :contents-end 21189 :robust-begin 20316 :robust-end 21187 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20307 :title #27# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #24#)) 0] [nil nil #113=(headline (:raw-value #28="Better Defaults" :begin 21190 :end 21992 :pre-blank 0 :contents-begin 21209 :contents-end 21991 :robust-begin 21211 :robust-end 21989 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21190 :title #28# :mode nil :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) 0] #110=(headline (:raw-value #29="Company" :begin 20655 :end 21190 :pre-blank 0 :contents-begin 20667 :contents-end 21189 :robust-begin 20669 :robust-end 21187 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20655 :title #29# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) 0] [[nil [nil nil #117=(headline (:raw-value #31="Magit" :begin 23861 :end 24258 :pre-blank 0 :contents-begin 23870 :contents-end 24257 :robust-begin 23872 :robust-end 24255 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 23861 :title #31# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #24#)) 0] #118=(headline #32=(:raw-value "Mu4e" :begin 22836 :end 23861 :pre-blank 2 :contents-begin 22846 :contents-end 23860 :robust-begin 22848 :robust-end 23858 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22836 :title (#("Mu4e" 0 4 (:parent (headline #32#)))) :parent #24# :cached t :org-element--cache-sync-key nil)) 1] [nil nil #122=(headline (:raw-value #33="Smudge" :begin 24809 :end 25332 :pre-blank 0 :contents-begin 24819 :contents-end 25331 :robust-begin 24821 :robust-end 25329 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 24809 :title #33# :mode nil :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) 0] #120=(headline (:raw-value #34="Monkeytype" :begin 24258 :end 24809 :pre-blank 0 :contents-begin 24272 :contents-end 24808 :robust-begin 24274 :robust-end 24806 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 24258 :title #34# :mode nil :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) -1] #115=(headline (:raw-value #35="Evil" :begin 21992 :end 22836 :pre-blank 0 :contents-begin 22000 :contents-end 22835 :robust-begin 22002 :robust-end 22833 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21992 :title #35# :mode nil :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) 1] #108=(headline #36=(:raw-value "Fonts" :begin 19792 :end 20307 :pre-blank 2 :contents-begin 19803 :contents-end 20306 :robust-begin 19805 :robust-end 20304 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19792 :title (#("Fonts" 0 5 (:parent (headline #36#)))) :parent #24# :cached t :org-element--cache-sync-key nil)) 0] #19# 1] [[[[[nil nil #124=(headline (:raw-value #37="Dashboard" :begin 25355 :end 29224 :pre-blank 0 :contents-begin 25368 :contents-end 29223 :robust-begin 25370 :robust-end 29221 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 25355 :title #37# :mode section :granularity element :cached t :parent #40=(headline (:raw-value #38="Visual configuration" :begin 25332 :end 64085 :pre-blank 0 :contents-begin 25355 :contents-end 64084 :robust-begin 25357 :robust-end 64082 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 25332 :title #38# :mode nil :granularity element :cached t :parent #8# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #126=(headline (:raw-value #39="Info Colors" :begin 29224 :end 29538 :pre-blank 0 :contents-begin 29239 :contents-end 29537 :robust-begin 29241 :robust-end 29535 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 29224 :title #39# :mode nil :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) -1] [nil [nil nil #45=(headline (:raw-value #41="Minad Suite" :begin 38690 :end 42213 :pre-blank 0 :contents-begin 38705 :contents-end 42212 :robust-begin 38707 :robust-end 42210 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38690 :title #41# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 0] #128=(headline (:raw-value #42="Mini-Frame" :begin 32684 :end 38690 :pre-blank 0 :contents-begin 32698 :contents-end 38689 :robust-begin 32700 :robust-end 38687 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 32684 :title #42# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) 1] #127=(headline (:raw-value #43="Minibuffer" :begin 29538 :end 32684 :pre-blank 0 :contents-begin 29552 :contents-end 32683 :robust-begin 29554 :robust-end 32681 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 29538 :title #43# :mode nil :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) 0] [[[nil nil #132=(headline (:raw-value #44="Marginalia" :begin 41958 :end 42213 :pre-blank 0 :contents-begin 41973 :contents-end 42212 :robust-begin 41975 :robust-end 42210 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 41958 :title #44# :mode nil :granularity element :cached t :parent #45# :org-element--cache-sync-key nil)) 0] [nil nil #49=(headline (:raw-value #46="Nano" :begin 45439 :end 49465 :pre-blank 0 :contents-begin 45447 :contents-end 49464 :robust-begin 45449 :robust-end 49462 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 45439 :title #46# :mode nil :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) 0] #134=(headline (:raw-value #47="Elcord" :begin 42213 :end 45020 :pre-blank 0 :contents-begin 42223 :contents-end 45019 :robust-begin 42225 :robust-end 45017 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 42213 :title #47# :mode nil :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) 0] [[nil nil #136=(headline (:raw-value #48="Colorscheme" :begin 46592 :end 49465 :pre-blank 0 :contents-begin 46608 :contents-end 49464 :robust-begin 46610 :robust-end 49462 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46592 :title #48# :mode nil :granularity element :cached t :parent #49# :org-element--cache-sync-key nil)) 0] nil #138=(headline (:raw-value #50="RSS" :begin 54588 :end 63333 :pre-blank 0 :contents-begin 54595 :contents-end 63332 :robust-begin 54597 :robust-end 63330 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 54588 :title #50# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #40#)) -1] #135=(headline (:raw-value #51="Window Padding" :begin 45622 :end 46592 :pre-blank 0 :contents-begin 45641 :contents-end 46591 :robust-begin 45643 :robust-end 46589 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 45622 :title #51# :mode nil :granularity element :cached t :parent #49# :org-element--cache-sync-key nil)) 0] #131=(headline (:raw-value #52="Vertico" :begin 38782 :end 41958 :pre-blank 0 :contents-begin 38794 :contents-end 41957 :robust-begin 38796 :robust-end 41955 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38782 :title #52# :mode nil :granularity element :cached t :parent #45# :org-element--cache-sync-key nil)) 0] [[[[nil nil #55=(headline (:raw-value #53="Org" :begin 64085 :end 78891 :pre-blank 0 :contents-begin 64091 :contents-end 78890 :robust-begin 64093 :robust-end 78888 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 64085 :title #53# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #8#)) 0] [nil nil #142=(headline (:raw-value #54="Org-Roam" :begin 72551 :end 73098 :pre-blank 0 :contents-begin 72563 :contents-end 73097 :robust-begin 72565 :robust-end 73095 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 72551 :title #54# :mode nil :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] #140=(headline (:raw-value #56="Org-Mode" :begin 64091 :end 72551 :pre-blank 0 :contents-begin 64103 :contents-end 72550 :robust-begin 64105 :robust-end 72548 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 64091 :title #56# :mode section :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] [[[nil nil #59=(headline #57=(:raw-value "Font Display" :begin 74160 :end 75380 :pre-blank 0 :contents-begin 74176 :contents-end 75379 :robust-begin 74178 :robust-end 75377 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 74160 :title (#("Font Display" 0 12 (:parent (headline #57#)))) :parent #55# :cached t :org-element--cache-sync-key nil)) 0] nil #144=(headline (:raw-value #58="(sub|super)script characters" :begin 74745 :end 74905 :pre-blank 0 :contents-begin 74778 :contents-end 74904 :robust-begin 74780 :robust-end 74902 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 74745 :title #58# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #59#)) -1] [[nil nil #63=(headline (:raw-value #60="Calc" :begin 75380 :end 78891 :pre-blank 0 :contents-begin 75388 :contents-end 78890 :robust-begin 75390 :robust-end 78888 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 75380 :title #60# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #55#)) 0] [nil nil #68=(headline (:raw-value #61="Latex" :begin 78891 :end 112085 :pre-blank 0 :contents-begin 78899 :contents-end 112085 :robust-begin 78901 :robust-end 112083 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 78891 :title #61# :mode nil :granularity element :cached t :parent #8# :org-element--cache-sync-key nil)) 0] #146=(headline (:raw-value #62="Dictionaries" :begin 77410 :end 78891 :pre-blank 0 :contents-begin 77427 :contents-end 78890 :robust-begin 77429 :robust-end 78888 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 77410 :title #62# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #63#)) 0] #143=(headline #64=(:raw-value "Make verbatim different to code" :begin 74905 :end 75380 :pre-blank 0 :contents-begin 74941 :contents-end 75379 :robust-begin 74943 :robust-end 75377 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 74905 :title (#("Make verbatim different to code" 0 31 (:parent (headline #64#)))) :parent #59# :cached t :org-element--cache-sync-key nil)) 0] #141=(headline (:raw-value #65="Org-Agenda" :begin 73098 :end 74160 :pre-blank 0 :contents-begin 73112 :contents-end 74159 :robust-begin 73114 :robust-end 74157 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 73098 :title #65# :mode nil :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 1] [[[nil nil #151=(headline (:raw-value #66="View Exported File" :begin 79409 :end 80867 :pre-blank 0 :contents-begin 79432 :contents-end 80866 :robust-begin 79434 :robust-end 80864 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 79409 :title #66# :mode nil :granularity element :cached t :parent #76=(headline (:raw-value #67="PDF-Tools" :begin 79074 :end 80867 :pre-blank 0 :contents-begin 79087 :contents-end 80866 :robust-begin 79089 :robust-end 80864 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 79074 :title #67# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #155=(headline (:raw-value #69="Tectonic" :begin 82035 :end 82380 :pre-blank 0 :contents-begin 82047 :contents-end 82379 :robust-begin 82049 :robust-end 82377 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 82035 :title #69# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 0] #153=(headline (:raw-value #70="\\(\\LaTeX\\) highlighting in Org-mode" :begin 80867 :end 82035 :pre-blank 0 :contents-begin 80906 :contents-end 82034 :robust-begin 80908 :robust-end 82032 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 80867 :title #70# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 0] [[nil nil #159=(headline (:raw-value #71="Conditional features" :begin 83680 :end 93866 :pre-blank 0 :contents-begin 83704 :contents-end 93865 :robust-begin 83706 :robust-end 93863 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 83680 :title #71# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 0] [[nil nil #161=(headline (:raw-value #72="Support images from URLs" :begin 108721 :end 110594 :pre-blank 0 :contents-begin 108749 :contents-end 110593 :robust-begin 108751 :robust-end 110591 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 108721 :title #72# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 0] nil #163=(headline (:raw-value #73="Beamer Exports" :begin 110594 :end 112085 :pre-blank 0 :contents-begin 110612 :contents-end 112085 :robust-begin 110614 :robust-end 112083 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 110594 :title #73# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) -1] #165=(headline (:raw-value #74="Ox-chameleon" :begin 108593 :end 108721 :pre-blank 0 :contents-begin 108609 :contents-end 108720 :robust-begin 108611 :robust-end 108718 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 108593 :title #74# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 1] #157=(headline (:raw-value #75="Preambles" :begin 82380 :end 83680 :pre-blank 0 :contents-begin 82393 :contents-end 83679 :robust-begin 82395 :robust-end 83677 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 82380 :title #75# :mode nil :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 1] #76# 0] #148=(headline #77=(:raw-value "Ebooks" :begin 63333 :end 64085 :pre-blank 2 :contents-begin 63345 :contents-end 64084 :robust-begin 63347 :robust-end 64082 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 63333 :title (#("Ebooks" 0 6 (:parent (headline #77#)))) :parent #40# :cached t :org-element--cache-sync-key nil)) 1] #40# 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #8# 0] [nil nil (keyword (:key "TITLE" :value "DOOM Emacs" :begin 1 :end 21 :post-blank 0 :post-affiliated 1 :mode top-comment :granularity element :cached t :parent #78=(section (:begin 1 :end 585 :contents-begin 1 :contents-end 584 :robust-begin 1 :robust-end 582 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #8# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #78# 0] [[nil nil (keyword (:key "AUTHOR" :value "Shaurya Singh" :begin 84 :end 108 :post-blank 0 :post-affiliated 84 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) 0] [nil nil (keyword (:key "STARTUP" :value "show2levels indent hidestars" :begin 149 :end 189 :post-blank 0 :post-affiliated 149 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) 0] (keyword (:key "DESCRIPTION" :value "A GNU Emacs configuration" :begin 108 :end 149 :post-blank 0 :post-affiliated 108 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) 0] (keyword (:key "SUBTITLE" :value "Copyright (C) 2021 ─ Shaurya Singh, Henrik Lissner" :begin 21 :end 84 :post-blank 0 :post-affiliated 21 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) 0] [[nil nil (keyword (:key "PROPERTY" :value "header-args:emacs-lisp :tangle yes :comments link" :begin 214 :end 277 :post-blank 1 :post-affiliated 214 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 291 :end 572 :contents-begin 291 :contents-end 572 :post-blank 0 :post-affiliated 291 :mode nil :granularity element :cached t :parent #79=(quote-block (:begin 277 :end 585 :contents-begin 291 :contents-end 572 :post-blank 1 :post-affiliated 277 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #79# 0] (keyword (:key "OPTIONS" :value "coverpage:yes" :begin 189 :end 214 :post-blank 0 :post-affiliated 189 :mode nil :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) -1] [[[nil nil #80=(section (:begin 593 :end 3579 :contents-begin 593 :contents-end 3577 :robust-begin 593 :robust-end 3575 :post-blank 2 :post-affiliated 593 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #4#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 651 :end 1478 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; config.el -*- lexical-binding: t; -*-\12;; This file has been generated from config.org file. DO NOT EDIT.\12;; Sources are available from https://github.com/shaunsingh/nyoom.emacs\12\12;; Copyright (C) 2022 Shaurya Singh\12\12;; This file is free software; you can redistribute it and/or modify\12;; it under the terms of the GNU General Public License as published by\12;; the Free Software Foundation; either version 3, or (at your option)\12;; any later version.\12\12;; This file is distributed in the hope that it will be useful,\12;; but WITHOUT ANY WARRANTY; without even the implied warranty of\12;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\12;; GNU General Public License for more details.\12\12;; For a full copy of the GNU General Public License\12;; see <https://www.gnu.org/licenses/>.\12\12" :post-blank 2 :post-affiliated 651 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] (paragraph (:begin 593 :end 651 :contents-begin 593 :contents-end 651 :post-blank 0 :post-affiliated 593 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] [nil nil (plain-list (:type ordered :begin 1705 :end 1864 :contents-begin 1705 :contents-end 1863 :structure ((1705 0 "1. " nil nil nil 1755) (1755 0 "2. " nil nil nil 1788) (1788 0 "3. " nil nil nil 1863)) :post-blank 1 :post-affiliated 1705 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] (paragraph (:begin 1478 :end 1705 :contents-begin 1478 :contents-end 1704 :post-blank 1 :post-affiliated 1478 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) -1] #4# -1] [[[[[nil nil (paragraph (:begin 1940 :end 2035 :contents-begin 1940 :contents-end 2035 :post-blank 0 :post-affiliated 1940 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] [nil nil (paragraph (:begin 2170 :end 2311 :contents-begin 2170 :contents-end 2310 :post-blank 1 :post-affiliated 2170 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] (quote-block (:begin 2035 :end 2170 :contents-begin 2049 :contents-end 2157 :post-blank 1 :post-affiliated 2035 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] [[nil nil (paragraph (:begin 2469 :end 2666 :contents-begin 2469 :contents-end 2664 :post-blank 2 :post-affiliated 2469 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] [nil nil (table (:begin 2848 :end 3489 :type org :tblfm nil :contents-begin 2936 :contents-end 3488 :value nil :post-blank 1 :post-affiliated 2936 :plot "transpose:yes type:radar min:0 max:5 ticks:5 file:\"misc/editor-comparison.jpeg\"" :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] (paragraph (:begin 2666 :end 2848 :contents-begin 2666 :contents-end 2847 :post-blank 1 :post-affiliated 2666 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] (paragraph (:begin 2311 :end 2469 :contents-begin 2311 :contents-end 2468 :post-blank 1 :post-affiliated 2311 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 0] [[[nil nil #5# 0] [nil nil #81# 0] (section (:begin 3593 :end 4751 :contents-begin 3593 :contents-end 4750 :robust-begin 3593 :robust-end 4748 :post-blank 1 :post-affiliated 3593 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) 0] [[nil nil (paragraph (:begin 4777 :end 4864 :contents-begin 4777 :contents-end 4864 :post-blank 0 :post-affiliated 4777 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #82=(section (:begin 4777 :end 5727 :contents-begin 4777 :contents-end 5726 :robust-begin 4777 :robust-end 5724 :post-blank 1 :post-affiliated 4777 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #81#)))) 0] [nil [nil nil (paragraph (:begin 5464 :end 5727 :contents-begin 5464 :contents-end 5726 :post-blank 1 :post-affiliated 5464 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #82#)) 0] (paragraph (:begin 5282 :end 5464 :contents-begin 5282 :contents-end 5463 :post-blank 1 :post-affiliated 5282 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #82#)) 1] (plain-list (:type unordered :begin 4864 :end 5282 :contents-begin 4864 :contents-end 5281 :structure ((4864 0 "- " nil nil nil 5001) (5001 0 "- " nil nil nil 5029) (5029 0 "- " nil nil nil 5132) (5132 0 "- " nil nil nil 5281)) :post-blank 1 :post-affiliated 4864 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #82#)) 1] #82# 1] (keyword (:key "ATTR_HTML" :value ":class invertible :alt Radar chart comparing my thoughts on a few editors." :begin 3489 :end 3579 :post-blank 2 :post-affiliated 3489 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 1] [[nil [nil nil (paragraph (:begin 5762 :end 5925 :contents-begin 5762 :contents-end 5924 :post-blank 1 :post-affiliated 5762 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #84=(section (:begin 5762 :end 5925 :contents-begin 5762 :contents-end 5924 :robust-begin 5762 :robust-end 5922 :post-blank 1 :post-affiliated 5762 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #83#)))) 0] #84# 1] [[nil nil #12# 0] [[nil nil (property-drawer (:begin 5957 :end 6012 :contents-begin 5970 :contents-end 6006 :post-blank 0 :post-affiliated 5957 :mode planning :granularity element :cached t :parent #87=(section (:begin 5957 :end 7076 :contents-begin 5957 :contents-end 7075 :robust-begin 5957 :robust-end 7073 :post-blank 1 :post-affiliated 5957 :mode section :granularity element :cached t :parent #12# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #85# 0] #86# 0] #87# 1] #9# 1] #83# -1] (paragraph (:begin 1864 :end 1940 :contents-begin 1864 :contents-end 1939 :post-blank 1 :post-affiliated 1864 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #80#)) 1] [[[[[nil nil (paragraph (:begin 7587 :end 7713 :contents-begin 7587 :contents-end 7713 :post-blank 0 :post-affiliated 7587 :mode planning :granularity element :cached t :parent #88=(section (:begin 7587 :end 10770 :contents-begin 7587 :contents-end 10769 :robust-begin 7587 :robust-end 10767 :post-blank 1 :post-affiliated 7587 :mode section :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7976 :end 8854 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "doom-dashboard               ; a nifty splash screen for Emacs\12doom-quit                    ; DOOM quit-message prompts when you quit Emacs\12(ligatures                   ; ligatures and symbols to make your code pnoretty again\12 +extra)                     ; for those who dislike letters\12minimap                      ; show a map of the code on the side\12ophints                      ; highlight the region an operation acts on\12(popup                       ; tame sudden yet inevitable temporary windows\12 +all                        ; catch all popups that start with an asterix\12 +defaults)                  ; default popup rules\12vc-gutter                    ; vcs diff in the fringe\12workspaces                   ; tab emulation, persistence & separate workspaces\12zen                          ; distraction-free coding or writing\12" :post-blank 1 :post-affiliated 7992 :name "doom-ui" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7713 :end 7976 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(company                     ; the ultimate code completion backend\12 +childframe)                ; ... when your children are better than you\12(vertico +icons)             ; the search engine of the future\12" :post-blank 1 :post-affiliated 7737 :name "doom-completion" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9030 :end 9439 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(dired +icons)               ; making dired pretty [functional]\12electric                     ; smarter, keyword-based electric-indent\12(ibuffer +icons)             ; interactive buffer management\12undo                         ; persistent, smarter undo for your inevitable mistakes\12vc                           ; version-control and Emacs, sitting in a tree\12" :post-blank 1 :post-affiliated 9049 :name "doom-emacs" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8854 :end 9030 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(evil +everywhere)           ; come to the dark side, we have cookies\12format                       ; automated prettiness\12" :post-blank 1 :post-affiliated 8874 :name "doom-editor" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) -1] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9854 :end 10656 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "biblio                       ; Writes a PhD for you (citation needed)\12(debugger +lsp)              ; FIXME stepping through code, to help you add bugs\12(eval +overlay)              ; run code, run (also, repls)\12(lookup                      ; helps you navigate your code and documentation\12 +dictionary                 ; dictionary/thesaurus is nice\12 +docsets)                   ; ...or in Dash docsets locally\12lsp                          ; Language Server Protocol\12(magit                       ; a git porcelain for Emacs\12 +forge)                     ; interface with git forges\12pdf                          ; pdf enhancements\12rgb                          ; creating color strings\12tree-sitter                  ; Syntax and Parsing sitting in a tree\12" :post-blank 1 :post-affiliated 9873 :name "doom-tools" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9559 :end 9854 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "syntax                       ; tasing you for every semicolon you forget\12(:if (executable-find \"aspell\") spell) ; tasing you for misspelling mispelling\12(:if (executable-find \"languagetool\") grammar) ; tasing grammar mistake every you make\12" :post-blank 1 :post-affiliated 9581 :name "doom-checkers" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 1] [[nil nil #91=(section (:begin 10793 :end 15498 :contents-begin 10793 :contents-end 15497 :robust-begin 10793 :robust-end 15495 :post-blank 1 :post-affiliated 10793 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #89#)) 0] [nil nil #90# 0] (paragraph (:begin 10793 :end 10961 :contents-begin 10793 :contents-end 10960 :post-blank 1 :post-affiliated 10793 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #91#)) 0] #89# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9439 :end 9559 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "vterm                        ; the best terminal emulation in Emacs\12" :post-blank 1 :post-affiliated 9457 :name "doom-term" :mode nil :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 0] [[[[[nil nil (paragraph (:begin 15524 :end 15635 :contents-begin 15524 :contents-end 15635 :post-blank 0 :post-affiliated 15524 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #92=(section (:begin 15524 :end 16042 :contents-begin 15524 :contents-end 16041 :robust-begin 15524 :robust-end 16039 :post-blank 1 :post-affiliated 15524 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #90#)))) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15736 :end 16042 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;calendar                   ; A dated approach to timetabling\12;;emms                       ; Multimedia in Emacs is music to my ears\12;;everywhere                 ; *leave* Emacs!? You must be joking.\12(rss +org)                   ; emacs as an RSS reader\12" :post-blank 1 :post-affiliated 15753 :name "doom-app" :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #92#)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15635 :end 15736 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(:if (executable-find \"mu\") (mu4e +org +gmail))\12" :post-blank 1 :post-affiliated 15654 :name "doom-email" :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #92#)) 0] [[nil nil #94=(section (:begin 16054 :end 16484 :contents-begin 16054 :contents-end 16483 :robust-begin 16054 :robust-end 16481 :post-blank 1 :post-affiliated 16054 :mode section :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 0] [nil nil #93# 0] (property-drawer (:begin 16054 :end 16109 :contents-begin 16067 :contents-end 16103 :post-blank 0 :post-affiliated 16054 :mode planning :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) 0] #19# 0] [[nil nil #95# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17202 :end 17450 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(package! focus)\12(package! dimmer)\12(package! minions)\12(package! mini-frame)\12(package! solaire-mode :disable t)\12\12;; nano stuff\12(package! nano-theme)\12(package! svg-tag-mode)\12;; (package! nano-modeline)\12" :post-blank 1 :post-affiliated 17216 :name "looks" :mode nil :granularity element :cached t :parent #96=(section (:begin 17127 :end 17450 :contents-begin 17127 :contents-end 17449 :robust-begin 17127 :robust-end 17447 :post-blank 1 :post-affiliated 17127 :mode section :granularity element :cached t :parent #95# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] (paragraph (:begin 17127 :end 17202 :contents-begin 17127 :contents-end 17202 :post-blank 0 :post-affiliated 17127 :mode planning :granularity element :cached t :parent #96# :org-element--cache-sync-key nil)) 1] #96# 1] #97# 0] [[nil [nil nil (paragraph (:begin 17470 :end 17548 :contents-begin 17470 :contents-end 17548 :post-blank 0 :post-affiliated 17470 :mode planning :granularity element :cached t :parent #99=(section (:begin 17470 :end 17818 :contents-begin 17470 :contents-end 17817 :robust-begin 17470 :robust-end 17815 :post-blank 1 :post-affiliated 17470 :mode section :granularity element :cached t :parent #98# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #99# 1] [[nil nil (item (:bullet "- " :begin 17548 :end 17576 :contents-begin 17550 :contents-end 17576 :checkbox nil :counter nil :structure #100=((17548 0 "- " nil nil nil 17576) (17576 0 "- " nil nil nil 17601) (17601 0 "- " nil nil nil 17617) (17617 0 "- " nil nil nil 17638)) :pre-blank 0 :post-blank 0 :post-affiliated 17548 :tag nil :mode item :granularity element :cached t :parent #101=(plain-list (:type unordered :begin 17548 :end 17638 :contents-begin 17548 :contents-end 17638 :structure #100# :post-blank 0 :post-affiliated 17548 :mode nil :granularity element :cached t :parent #99# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [[nil nil (item (:bullet "- " :begin 17601 :end 17617 :contents-begin 17603 :contents-end 17617 :checkbox nil :counter nil :structure #100# :pre-blank 0 :post-blank 0 :post-affiliated 17601 :tag nil :mode item :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17638 :end 17818 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(package! nov)\12(package! lexic)\12(package! info-colors)\12(package! magit-delta :recipe (:host github :repo \"dandavison/magit-delta\"))\12" :post-blank 1 :post-affiliated 17652 :name "emacs" :mode nil :granularity element :cached t :parent #99# :org-element--cache-sync-key nil)) 0] (item (:bullet "- " :begin 17617 :end 17638 :contents-begin 17619 :contents-end 17638 :checkbox nil :counter nil :structure #100# :pre-blank 0 :post-blank 0 :post-affiliated 17617 :tag nil :mode item :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] (item (:bullet "- " :begin 17576 :end 17601 :contents-begin 17578 :contents-end 17601 :checkbox nil :counter nil :structure #100# :pre-blank 0 :post-blank 0 :post-affiliated 17576 :tag nil :mode item :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 1] #101# 1] #98# 0] #92# 1] #88# -1] [[[[[[nil nil #103=(section (:begin 17829 :end 18004 :contents-begin 17829 :contents-end 18003 :robust-begin 17829 :robust-end 18001 :post-blank 1 :post-affiliated 17829 :mode section :granularity element :cached t :parent #102# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17867 :end 18004 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(package! xkcd)\12(package! md4rd)\12(package! smudge)\12(package! elcord)\12(package! monkeytype)\12" :post-blank 1 :post-affiliated 17879 :name "fun" :mode nil :granularity element :cached t :parent #103# :org-element--cache-sync-key nil)) 0] nil #24# -1] (paragraph (:begin 17829 :end 17867 :contents-begin 17829 :contents-end 17867 :post-blank 0 :post-affiliated 17829 :mode planning :granularity element :cached t :parent #103# :org-element--cache-sync-key nil)) 1] [[[[nil nil #105=(section (:begin 18044 :end 18299 :contents-begin 18044 :contents-end 18298 :robust-begin 18044 :robust-end 18296 :post-blank 1 :post-affiliated 18044 :mode section :granularity element :cached t :parent #104# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18133 :end 18299 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq-default custom-file (expand-file-name \".custom.el\" doom-private-dir))\12(when (file-exists-p custom-file)\12  (load custom-file))\12" :post-blank 1 :post-affiliated 18133 :mode nil :granularity element :cached t :parent #105# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 18044 :end 18133 :contents-begin 18044 :contents-end 18133 :post-blank 0 :post-affiliated 18044 :mode planning :granularity element :cached t :parent #105# :org-element--cache-sync-key nil)) 0] [nil [nil nil (paragraph (:begin 18831 :end 19075 :contents-begin 18831 :contents-end 19074 :post-blank 1 :post-affiliated 18831 :mode planning :granularity element :cached t :parent #107=(section (:begin 18831 :end 19792 :contents-begin 18831 :contents-end 19791 :robust-begin 18831 :robust-end 19789 :post-blank 1 :post-affiliated 18831 :mode section :granularity element :cached t :parent #106# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #107# 1] #106# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19110 :end 19181 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq vterm-always-compile-module t)\12" :post-blank 1 :post-affiliated 19110 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19227 :end 19296 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq vterm-kill-buffer-on-exit t)\12" :post-blank 1 :post-affiliated 19227 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 19181 :end 19227 :contents-begin 19181 :contents-end 19227 :post-blank 0 :post-affiliated 19181 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 19075 :end 19110 :contents-begin 19075 :contents-end 19110 :post-blank 0 :post-affiliated 19075 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) -1] #104# 1] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19363 :end 19539 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! vterm\12  (setf (alist-get \"magit-status\" vterm-eval-cmds nil nil #'equal)\12        '((lambda (path)\12            (magit-status path)))))\12" :post-blank 1 :post-affiliated 19363 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19729 :end 19792 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq +ligatures-in-modes t)\12" :post-blank 1 :post-affiliated 19729 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 19539 :end 19729 :contents-begin 19539 :contents-end 19729 :post-blank 0 :post-affiliated 19539 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] [[nil nil #109=(section (:begin 19803 :end 20307 :contents-begin 19803 :contents-end 20306 :robust-begin 19803 :robust-end 20304 :post-blank 1 :post-affiliated 19803 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #108#)) 0] [nil [nil nil #30# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19895 :end 20307 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;fonts\12(setq doom-font (font-spec :family \"Liga SFMono Nerd Font\" :size 15)\12      doom-big-font (font-spec :family \"Liga SFMono Nerd Font\" :size 20)\12      doom-variable-pitch-font (font-spec :family \"IBM Plex Sans\" :size 16)\12      doom-unicode-font (font-spec :family \"Liga SFMono Nerd Font\")\12      doom-serif-font (font-spec :family \"IBM Plex Sans\" :size 16 :weight 'medium))\12" :post-blank 1 :post-affiliated 19895 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #109#)) 1] (paragraph (:begin 19803 :end 19895 :contents-begin 19803 :contents-end 19895 :post-blank 0 :post-affiliated 19803 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #109#)) 1] #108# 1] [[[nil nil (paragraph (:begin 20314 :end 20421 :contents-begin 20314 :contents-end 20421 :post-blank 0 :post-affiliated 20314 :mode planning :granularity element :cached t :parent #111=(section (:begin 20314 :end 20655 :contents-begin 20314 :contents-end 20654 :robust-begin 20314 :robust-end 20652 :post-blank 1 :post-affiliated 20314 :mode section :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #110# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 20421 :end 20655 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! lsp-mode\12  (setq lsp-enable-symbol-highlighting nil))\12\12(after! lsp-ui\12  (setq lsp-ui-sideline-enable nil  ; no more useful than flycheck\12        lsp-ui-doc-enable nil))     ; redundant with K\12" :post-blank 1 :post-affiliated 20421 :mode nil :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 20726 :end 21190 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! company\12  (setq company-idle-delay 0.1\12        company-selection-wrap-around t\12        company-require-match 'never\12        company-dabbrev-downcase nil\12        company-dabbrev-ignore-case t\12        company-dabbrev-other-buffers nil\12        company-tooltip-limit 5\12        company-tooltip-minimum-width 40)\12  (set-company-backend!\12    '(text-mode\12      markdown-mode\12      gfm-mode)\12    '(:seperate\12      company-files)))\12" :post-blank 1 :post-affiliated 20726 :mode nil :granularity element :cached t :parent #112=(section (:begin 20667 :end 21190 :contents-begin 20667 :contents-end 21189 :robust-begin 20667 :robust-end 21187 :post-blank 1 :post-affiliated 20667 :mode section :granularity element :cached t :parent #110# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] (paragraph (:begin 20667 :end 20726 :contents-begin 20667 :contents-end 20726 :post-blank 0 :post-affiliated 20667 :mode planning :granularity element :cached t :parent #112# :org-element--cache-sync-key nil)) 1] #112# 0] #111# -1] (paragraph (:begin 19296 :end 19363 :contents-begin 19296 :contents-end 19363 :post-blank 0 :post-affiliated 19296 :mode nil :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] [[[[[nil nil #114=(section (:begin 21209 :end 21992 :contents-begin 21209 :contents-end 21991 :robust-begin 21209 :robust-end 21989 :post-blank 1 :post-affiliated 21209 :mode section :granularity element :cached t :parent #113# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21280 :end 21570 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq scroll-margin 2\12      auto-save-default t\12      display-line-numbers-type nil\12      delete-by-moving-to-trash t\12      truncate-string-ellipsis \"…\"\12      browse-url-browser-function 'xwidget-webkit-browse-url)\12\12(fringe-mode 0)\12(global-subword-mode 1)\12" :post-blank 1 :post-affiliated 21280 :mode nil :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 21209 :end 21280 :contents-begin 21209 :contents-end 21280 :post-blank 0 :post-affiliated 21209 :mode planning :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) 0] [[nil nil #116=(section (:begin 22000 :end 22836 :contents-begin 22000 :contents-end 22835 :robust-begin 22000 :robust-end 22833 :post-blank 1 :post-affiliated 22000 :mode section :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22123 :end 22436 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! evil\12  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default\12        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode\12        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring\12" :post-blank 1 :post-affiliated 22123 :mode nil :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 22000 :end 22123 :contents-begin 22000 :contents-end 22123 :post-blank 0 :post-affiliated 22000 :mode planning :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] #115# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22495 :end 22836 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq which-key-allow-multiple-replacements t\12      which-key-idle-delay 0.5) ;; I need the help, I really do\12(after! which-key\12  (pushnew!\12   which-key-replacement-alist\12   '((\"\" . \"\\\\`+?evil[-:]?\\\\(?:a-\\\\)?\\\\(.*\\\\)\") . (nil . \" \\\\1\"))\12   '((\"\\\\`g s\" . \"\\\\`evilem--?motion-\\\\(.*\\\\)\") . (nil . \" \\\\1\"))))\12" :post-blank 1 :post-affiliated 22495 :mode nil :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] [nil nil #117# 0] #118# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 24185 :end 24258 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! magit\12  (magit-delta-mode +1))\12" :post-blank 1 :post-affiliated 24185 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #119=(section (:begin 23870 :end 24258 :contents-begin 23870 :contents-end 24257 :robust-begin 23870 :robust-end 24255 :post-blank 1 :post-affiliated 23870 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #117#)))) 0] (paragraph (:begin 23870 :end 24185 :contents-begin 23870 :contents-end 24185 :post-blank 0 :post-affiliated 23870 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #119#)) 1] #119# 0] (paragraph (:begin 22436 :end 22495 :contents-begin 22436 :contents-end 22495 :post-blank 0 :post-affiliated 22436 :mode nil :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) 0] [[[[nil nil #121=(section (:begin 24272 :end 24809 :contents-begin 24272 :contents-end 24808 :robust-begin 24272 :robust-end 24806 :post-blank 1 :post-affiliated 24272 :mode section :granularity element :cached t :parent #120# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 24421 :end 24809 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package! monkeytype\12  :commands (monkeytype-region monkeytype-buffer monkeytype-region-as-words)\12  :config\12  (setq monkeytype-directory \"~/.config/monkeytype\"\12        monkeytype-file-name \"%a-%d-%b-%Y-%H-%M-%S\"\12        monkeytype-randomize t\12        monkeytype-delete-trailing-whitespace t\12        monkeytype-excluded-chars-regexp \"[^[:alnum:]']\"))\12" :post-blank 1 :post-affiliated 24421 :mode nil :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 24272 :end 24421 :contents-begin 24272 :contents-end 24421 :post-blank 0 :post-affiliated 24272 :mode planning :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) 0] [[nil nil #123=(section (:begin 24819 :end 25332 :contents-begin 24819 :contents-end 25331 :robust-begin 24819 :robust-end 25329 :post-blank 1 :post-affiliated 24819 :mode section :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 24998 :end 25332 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package! smudge\12  :commands global-smudge-remote-mode\12  :config\12  (setq smudge-transport 'connect\12        smudge-oauth2-client-secret \"8f5525c076544cd6b25588c868b9b3d7\"\12        smudge-oauth2-client-id \"4b2b46899e604b6884714cd7ca47e0e3\")\12  (map! :map smudge-mode-map \"M-p\" #'smudge-command-map))\12" :post-blank 1 :post-affiliated 24998 :mode nil :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 24819 :end 24998 :contents-begin 24819 :contents-end 24998 :post-blank 0 :post-affiliated 24819 :mode planning :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) 0] #122# 0] [[[[nil nil #124# 0] [nil nil (paragraph (:begin 25368 :end 25508 :contents-begin 25368 :contents-end 25508 :post-blank 0 :post-affiliated 25368 :mode planning :granularity element :cached t :parent #125=(section (:begin 25368 :end 29224 :contents-begin 25368 :contents-end 29223 :robust-begin 25368 :robust-end 29221 :post-blank 1 :post-affiliated 25368 :mode section :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #125# 0] [[nil nil #126# 0] nil #127# -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 25508 :end 29224 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq fancy-splash-image (expand-file-name \"misc/splash-images/kaori.png\" doom-private-dir) ;; ibm, kaori, fennel\12      +doom-dashboard-banner-padding '(0 . 0))\12\12(defvar splash-phrase-source-folder\12  (expand-file-name \"misc/splash-phrases\" doom-private-dir)\12  \"A folder of text files with a fun phrase on each line.\")\12\12(defvar splash-phrase-sources\12  (let* ((files (directory-files splash-phrase-source-folder nil \"\\\\.txt\\\\'\"))\12         (sets (delete-dups (mapcar\12                             (lambda (file)\12                               (replace-regexp-in-string \"\\\\(?:-[0-9]+-\\\\w+\\\\)?\\\\.txt\" \"\" file))\12                             files))))\12    (mapcar (lambda (sset)\12              (cons sset\12                    (delq nil (mapcar\12                               (lambda (file)\12                                 (when (string-match-p (regexp-quote sset) file)\12                                   file))\12                               files))))\12            sets))\12  \"A list of cons giving the phrase set name, and a list of files which contain phrase components.\")\12\12(defvar splash-phrase-set\12  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))\12  \"The default phrase set. See `splash-phrase-sources'.\")\12\12(defun splase-phrase-set-random-set ()\12  \"Set a new random splash phrase set.\"\12  (interactive)\12  (setq splash-phrase-set\12        (nth (random (1- (length splash-phrase-sources)))\12             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))\12  (+doom-dashboard-reload t))\12\12(defvar splase-phrase--cache nil)\12\12(defun splash-phrase-get-from-file (file)\12  \"Fetch a random line from FILE.\"\12  (let ((lines (or (cdr (assoc file splase-phrase--cache))\12                   (cdar (push (cons file\12                                     (with-temp-buffer\12                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))\12                                       (split-string (string-trim (buffer-string)) \"\\n\")))\12                               splase-phrase--cache)))))\12    (nth (random (length lines)) lines)))\12\12(defun splash-phrase (&optional set)\12  \"Construct a splash phrase from SET. See `splash-phrase-sources'.\"\12  (mapconcat\12   #'splash-phrase-get-from-file\12   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))\12   \" \"))\12\12(defun doom-dashboard-phrase ()\12  \"Get a splash phrase, flow it over multiple lines as needed, and make fontify it.\"\12  (mapconcat\12   (lambda (line)\12     (+doom-dashboard--center\12      +doom-dashboard--width\12      (with-temp-buffer\12        (insert-text-button\12         line\12         'action\12         (lambda (_) (+doom-dashboard-reload t))\12         'face 'doom-dashboard-menu-title\12         'mouse-face 'doom-dashboard-menu-title\12         'help-echo \"Random phrase\"\12         'follow-link t)\12        (buffer-string))))\12   (split-string\12    (with-temp-buffer\12      (insert (splash-phrase))\12      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))\12      (fill-region (point-min) (point-max))\12      (buffer-string))\12    \"\\n\")\12   \"\\n\"))\12\12(defadvice! doom-dashboard-widget-loaded-with-phrase ()\12  :override #'doom-dashboard-widget-loaded\12  (setq line-spacing 0.2)\12  (insert\12   \"\\n\\n\"\12   (propertize\12    (+doom-dashboard--center\12     +doom-dashboard--width\12     (doom-display-benchmark-h 'return))\12    'face 'doom-dashboard-loaded)\12   \"\\n\"\12   (doom-dashboard-phrase)\12   \"\\n\"))\12\12;; remove useless dashboard info\12(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)\12(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))\12(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))\12" :post-blank 1 :post-affiliated 25508 :mode nil :granularity element :cached t :parent #125# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 29552 :end 29719 :contents-begin 29552 :contents-end 29719 :post-blank 0 :post-affiliated 29552 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #129=(section (:begin 29552 :end 32684 :contents-begin 29552 :contents-end 32683 :robust-begin 29552 :robust-end 32681 :post-blank 1 :post-affiliated 29552 :mode section :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)))) 0] [nil nil #128# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 29719 :end 32684 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq minibuffer-prompt-properties '(read-only t\12                                     cursor-intangible t\12                                     face minibuffer-prompt)\12      enable-recursive-minibuffers t)\12\12(defun my/minibuffer-header ()\12  \"Minibuffer header\"\12  (let ((depth (minibuffer-depth)))\12    (concat\12     (propertize (concat \"  \" (if (> depth 1)\12                                   (format \"Minibuffer (%d)\" depth)\12                                 \"Minibuffer \")\12                         \"\\n\")\12                 'face `(:inherit (nano-subtle nano-strong)\12                         :box (:line-width (1 . 3)\12                               :color ,(face-background 'nano-subtle)\12                               :style flat)\12                         :extend t)))))\12\12(defun my/mini-frame-reset (frame)\12  \"Reset FRAME size and position.\12\12  Move frame at the top of parent frame and resize it\12  horizontally to fit the width of current selected window.\"\12  (interactive)\12  (let* ((border (frame-parameter frame 'internal-border-width))\12         (height (frame-parameter frame 'height)))\12    (with-selected-frame (frame-parent frame)\12      (let* ((edges (window-pixel-edges))\12             (body-edges (window-body-pixel-edges))\12             (top (nth 1 edges))\12             (bottom (nth 3 body-edges))\12             (left (- (nth 0 edges) (or left-fringe-width 0)))\12             (right (+ (nth 2 edges) (or right-fringe-width 0)))\12             (width (- right left))\12             (y (- top border)))\12        (set-frame-width frame width nil t)\12        (set-frame-height frame height)\12        (set-frame-position frame (- left border) y)))))\12\12(defun my/mini-frame-shrink (frame &optional delta)\12  \"Make the FRAME DELTA lines smaller.\12\12  If no argument is given, make the frame one line smaller. If\12  DELTA is negative, enlarge frame by -DELTA lines.\"\12  (interactive)\12  (let ((delta (or delta -1)))\12    (when (and (framep frame)\12               (frame-live-p frame)\12               (frame-visible-p frame))\12      (set-frame-parameter frame 'height\12                           (+ (frame-parameter frame 'height) delta)))))\12\12(defun my/minibuffer-setup ()\12  \"Install a header line in the minibuffer via an overlay (and a hook)\"\12  (set-window-margins nil 0 0)\12  (set-fringe-style '(0 . 0))\12  (cursor-intangible-mode t)\12  (face-remap-add-relative 'default\12                           :inherit 'highlight)\12 (let* ((overlay (make-overlay (+ (point-min) 0) (+ (point-min) 0)))\12        (inhibit-read-only t))\12\12    (save-excursion\12      (goto-char (point-min))\12      (insert (propertize\12               (concat (my/minibuffer-header)\12                       (propertize \"\\n\" 'face `(:height 0.33))\12                       (propertize \" \"))\12               'cursor-intangible t\12               'read-only t\12               'field t\12               'rear-nonsticky t\12               'front-sticky t)))))\12\12\12(add-hook 'minibuffer-setup-hook #'my/minibuffer-setup)\12" :post-blank 1 :post-affiliated 29719 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #129#)) 0] #129# -1] #40# 1] #120# 1] #113# 0] [[[[[[[nil nil (paragraph (:begin 32698 :end 32857 :contents-begin 32698 :contents-end 32857 :post-blank 0 :post-affiliated 32698 :mode planning :granularity element :cached t :parent #130=(section (:begin 32698 :end 38690 :contents-begin 32698 :contents-end 38689 :robust-begin 32698 :robust-end 38687 :post-blank 1 :post-affiliated 32698 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #128#)) :org-element--cache-sync-key nil)) 0] [nil nil #45# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 32857 :end 38690 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package! mini-frame\12  :hook (after-init . mini-frame-mode)\12  :config\12  (defcustom my/minibuffer-position 'top\12    \"Minibuffer position, one of 'top or 'bottom\"\12    :type '(choice (const :tag \"Top\"    top)\12                   (const :tag \"Bottom\" bottom))\12    :group 'nano-minibuffer)\12\12  (defun my/minibuffer--frame-parameters ()\12    \"Compute minibuffer frame size and position.\"\12\12    ;; Quite precise computation to align the minibuffer and the\12    ;; modeline when they are both at top position\12    (let* ((edges (window-pixel-edges)) ;; (left top right bottom)\12           (body-edges (window-body-pixel-edges)) ;; (left top right bottom)\12           (left (nth 0 edges)) ;; Take margins into account\12           (top (nth 1 edges)) ;; Drop header line\12           (right (nth 2 edges)) ;; Take margins into account\12           (bottom (nth 3 body-edges)) ;; Drop header line\12           (left (if (eq left-fringe-width 0)\12                     left\12                   (- left (frame-parameter nil 'left-fringe))))\12           (right (nth 2 edges))\12           (right (if (eq right-fringe-width 0)\12                      right\12                    (+ right (frame-parameter nil 'right-fringe))))\12           (border 1)\12           (width (- right left (* 0 border)))\12\12           ;; Window divider mode\12           (width (- width (if (and (bound-and-true-p window-divider-mode)\12                                    (or (eq window-divider-default-places 'right-only)\12                                        (eq window-divider-default-places t))\12                                    (window-in-direction 'right (selected-window)))\12                               window-divider-default-right-width\12                             0)))\12           (y (- top border)))\12\12      (append `((left-fringe . 0)\12                (right-fringe . 0)\12                (user-position . t)\12                (foreground-color . ,(face-foreground 'highlight nil 'default))\12                (background-color . ,(face-background 'highlight nil 'default)))\12              (cond ((and (eq my/minibuffer-position 'bottom))\12                     `((top . -1)\12                       (left . 0)\12                       (width . 1.0)\12                       (child-frame-border-width . 0)\12                       (internal-border-width . 0)))\12                    (t\12                     `((left . ,(- left border))\12                       (top . ,y)\12                       (width . (text-pixels . ,width))\12                       (child-frame-border-width . ,border)\12                       (internal-border-width . ,border)))))))\12\12    (set-face-background 'child-frame-border (face-foreground 'nano-faded))\12    (setq mini-frame-default-height 3)\12    (setq mini-frame-create-lazy t)\12    (setq mini-frame-show-parameters 'my/minibuffer--frame-parameters)\12    (setq mini-frame-ignore-commands\12          '(\"edebug-eval-expression\" debugger-eval-expression))\12    (setq mini-frame-internal-border-color (face-foreground 'nano-faded))\12    (setq mini-frame-resize-min-height 3)\12    (setq mini-frame-resize t)\12\12  (defun my/mini-frame (&optional height foreground background border)\12    \"Create a child frame positionned over the header line whose\12  width corresponds to the width of the current selected window.\12\12  The HEIGHT in lines can be specified, as well as the BACKGROUND\12  color of the frame. BORDER width (pixels) and color (FOREGROUND)\12  can be also specified.\"\12    (interactive)\12    (let* ((foreground (or foreground\12                           (face-foreground 'font-lock-comment-face nil t)))\12           (background (or background (face-background 'highlight nil t)))\12           (border (or border 1))\12           (height (round (* (or height 8) (window-font-height))))\12           (edges (window-pixel-edges))\12           (body-edges (window-body-pixel-edges))\12           (top (nth 1 edges))\12           (bottom (nth 3 body-edges))\12           (left (- (nth 0 edges) (or left-fringe-width 0)))\12           (right (+ (nth 2 edges) (or right-fringe-width 0)))\12           (width (- right left))\12\12           ;; Window divider mode\12           (width (- width (if (and (bound-and-true-p window-divider-mode)\12                                    (or (eq window-divider-default-places 'right-only)\12                                        (eq window-divider-default-places t))\12                                  (window-in-direction 'right (selected-window)))\12                               window-divider-default-right-width\12                             0)))\12           (y (- top border))\12           (child-frame-border (face-attribute 'child-frame-border :background)))\12      (set-face-attribute 'child-frame-border t :background foreground)\12      (let ((frame (make-frame\12                    `((parent-frame . ,(window-frame))\12                      (delete-before . ,(window-frame))\12                      (minibuffer . nil)\12                      (modeline . nil)\12                      (left . ,(- left border))\12                      (top . ,y)\12                      (width . (text-pixels . ,width))\12                      (height . (text-pixels . ,height))\12                      ;; (height . ,height)\12                      (child-frame-border-width . ,border)\12                      (internal-border-width . ,border)\12                      (background-color . ,background)\12                      (horizontal-scroll-bars . nil)\12                      (menu-bar-lines . 0)\12                      (tool-bar-lines . 0)\12                      (desktop-dont-save . t)\12                      (unsplittable . nil)\12                      (no-other-frame . t)\12                      (undecorated . t)\12                      (pixelwise . t)\12                      (visibility . t)))))\12        (set-face-attribute 'child-frame-border t :background child-frame-border)\12        frame))))\12" :post-blank 1 :post-affiliated 32857 :mode nil :granularity element :cached t :parent #130# :org-element--cache-sync-key nil)) 0] [nil nil #131# 0] (section (:begin 38705 :end 38782 :contents-begin 38705 :contents-end 38782 :robust-begin 38705 :robust-end 38780 :post-blank 0 :post-affiliated 38705 :mode section :granularity element :cached t :parent #45# :org-element--cache-sync-key nil)) -1] [[[nil nil #133=(section (:begin 41973 :end 42213 :contents-begin 41973 :contents-end 42212 :robust-begin 41973 :robust-end 42210 :post-blank 1 :post-affiliated 41973 :mode section :granularity element :cached t :parent #132# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 41991 :end 42213 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! marginalia\12  (setq marginalia--ellipsis \"…\"    ; Nicer ellipsis\12        marginalia-align 'right     ; right alignment\12        marginalia-align-offset -1)) ; one space on the right\12" :post-blank 1 :post-affiliated 41991 :mode nil :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 41973 :end 41991 :contents-begin 41973 :contents-end 41991 :post-blank 0 :post-affiliated 41973 :mode planning :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] [nil nil #49# 0] #134# -1] #132# 0] [[[[nil nil #135# 0] [nil nil #137=(section (:begin 46608 :end 49465 :contents-begin 46608 :contents-end 49464 :robust-begin 46608 :robust-end 49462 :post-blank 1 :post-affiliated 46608 :mode section :granularity element :cached t :parent #136# :org-element--cache-sync-key nil)) 0] #136# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46844 :end 47114 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun shaunsingh/apply-nano-theme (appearance)\12  \"Load theme, taking current system APPEARANCE into consideration.\"\12  (mapc #'disable-theme custom-enabled-themes)\12  (pcase appearance\12    ('light (nano-light))\12    ('dark (nano-dark))))\12" :post-blank 1 :post-affiliated 46844 :mode nil :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 46608 :end 46844 :contents-begin 46608 :contents-end 46844 :post-blank 0 :post-affiliated 46608 :mode planning :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) -1] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 47218 :end 48815 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package nano-theme\12  :hook (after-init . nano-light)\12  :config\12  ;; If emacs has been built with system appearance detection\12  ;; add a hook to change the theme to match the system\12  ;; (if (boundp 'ns-system-appearance-change-functions)\12  ;;     (add-hook 'ns-system-appearance-change-functions #'shaunsingh/apply-nano-theme))\12  ;; Now to add some missing faces\12  (custom-set-faces\12   `(flyspell-incorrect ((t (:underline (:color ,nano-light-salient :style line)))))\12   `(flyspell-duplicate ((t (:underline (:color ,nano-light-salient :style line)))))\12\12   `(git-gutter:modified ((t (:foreground ,nano-light-salient))))\12   `(git-gutter-fr:added ((t (:foreground ,nano-light-popout))))\12   `(git-gutter-fr:modified ((t (:foreground ,nano-light-salient))))\12\12   `(lsp-ui-doc-url:added ((t (:background ,nano-light-highlight))))\12   `(lsp-ui-doc-background:modified ((t (:background ,nano-light-highlight))))\12\12   `(vterm-color-red ((t (:foreground ,nano-light-critical))))\12   `(vterm-color-blue ((t (:foreground ,nano-light-salient))))\12   `(vterm-color-green ((t (:foreground ,nano-light-popout))))\12   `(vterm-color-yellow ((t (:foreground ,nano-light-popout))))\12   `(vterm-color-magenta ((t (:foreground ,nano-light-salient))))\12\12   `(scroll-bar ((t (:background ,nano-light-background))))\12   `(child-frame-border ((t (:foreground ,nano-light-faded))))\12\12   `(avy-lead-face-1 ((t (:foreground ,nano-light-subtle))))\12   `(avy-lead-face ((t (:foreground ,nano-light-popout :weight bold))))\12   `(avy-lead-face-0 ((t (:foreground ,nano-light-salient :weight bold))))))\12" :post-blank 1 :post-affiliated 47218 :mode nil :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 48962 :end 49465 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; (use-package! nano-modeline\12;;   :hook (after-init . nano-modeline-mode)\12;;   :config\12;;   (setq nano-modeline-prefix 'status\12;;         nano-modeline-prefix-padding 1\12;;         nano-modeline-position 'bottom))\12\12(use-package! minions\12  :hook (after-init . minions-mode))\12\12;; Add a zero-width tall character to add padding to modeline\12(setq-default mode-line-format\12              (cons (propertize \"\\u200b\" 'display '((raise -0.35) (height 1.4))) mode-line-format))\12" :post-blank 1 :post-affiliated 48962 :mode nil :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 48815 :end 48962 :contents-begin 48815 :contents-end 48962 :post-blank 0 :post-affiliated 48815 :mode nil :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] [[nil nil #139=(section (:begin 54595 :end 63333 :contents-begin 54595 :contents-end 63332 :robust-begin 54595 :robust-end 63330 :post-blank 1 :post-affiliated 54595 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #138#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 54657 :end 63333 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(map! :map elfeed-search-mode-map\12      :after elfeed-search\12      [remap kill-this-buffer] \"q\"\12      [remap kill-buffer] \"q\"\12      :n doom-leader-key nil\12      :n \"q\" #'+rss/quit\12      :n \"e\" #'elfeed-update\12      :n \"r\" #'elfeed-search-untag-all-unread\12      :n \"u\" #'elfeed-search-tag-all-unread\12      :n \"s\" #'elfeed-search-live-filter\12      :n \"RET\" #'elfeed-search-show-entry\12      :n \"p\" #'elfeed-show-pdf\12      :n \"+\" #'elfeed-search-tag-all\12      :n \"-\" #'elfeed-search-untag-all\12      :n \"S\" #'elfeed-search-set-filter\12      :n \"b\" #'elfeed-search-browse-url\12      :n \"y\" #'elfeed-search-yank)\12(map! :map elfeed-show-mode-map\12      :after elfeed-show\12      [remap kill-this-buffer] \"q\"\12      [remap kill-buffer] \"q\"\12      :n doom-leader-key nil\12      :nm \"q\" #'+rss/delete-pane\12      :nm \"o\" #'ace-link-elfeed\12      :nm \"RET\" #'org-ref-elfeed-add\12      :nm \"n\" #'elfeed-show-next\12      :nm \"N\" #'elfeed-show-prev\12      :nm \"p\" #'elfeed-show-pdf\12      :nm \"+\" #'elfeed-show-tag\12      :nm \"-\" #'elfeed-show-untag\12      :nm \"s\" #'elfeed-show-new-live-search\12      :nm \"y\" #'elfeed-show-yank)\12\12(after! elfeed-search\12  (set-evil-initial-state! 'elfeed-search-mode 'normal))\12(after! elfeed-show-mode\12  (set-evil-initial-state! 'elfeed-show-mode   'normal))\12\12(after! evil-snipe\12  (push 'elfeed-show-mode   evil-snipe-disabled-modes)\12  (push 'elfeed-search-mode evil-snipe-disabled-modes))\12\12(after! elfeed\12  (elfeed-org)\12  (use-package! elfeed-link)\12  (setq rmh-elfeed-org-files '(\"~/org/elfeed.org\"))\12\12  (setq elfeed-search-filter \"@1-week-ago +unread\"\12        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry\12        elfeed-search-title-min-width 80\12        elfeed-show-entry-switch #'pop-to-buffer\12        elfeed-show-entry-delete #'+rss/delete-pane\12        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style\12        shr-max-image-proportion 0.6)\12\12  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))\12  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)\12\12  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))\12    \"title face in elfeed show buffer\"\12    :group 'elfeed)\12  (defface elfeed-show-author-face `((t (:weight light)))\12    \"title face in elfeed show buffer\"\12    :group 'elfeed)\12  (set-face-attribute 'elfeed-search-title-face nil\12                      :foreground 'nil\12                      :weight 'light)\12\12  (defadvice! +rss-elfeed-wrap-h-nicer ()\12    \"Enhances an elfeed entry's readability by wrapping it to a width of\12`fill-column' and centering it with `visual-fill-column-mode'.\"\12    :override #'+rss-elfeed-wrap-h\12    (setq-local truncate-lines nil\12                shr-width 120\12                visual-fill-column-center-text t\12                default-text-properties '(line-height 1.1))\12    (let ((inhibit-read-only t)\12          (inhibit-modification-hooks t))\12      (visual-fill-column-mode)\12      ;; (setq-local shr-current-font '(:family \"Merriweather\" :height 1.2))\12      (set-buffer-modified-p nil)))\12\12  (defun +rss/elfeed-search-print-entry (entry)\12    \"Print ENTRY to the buffer.\"\12    (let* ((elfeed-goodies/tag-column-width 40)\12           (elfeed-goodies/feed-source-column-width 30)\12           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) \"\"))\12           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))\12           (feed (elfeed-entry-feed entry))\12           (feed-title\12            (when feed\12              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))\12           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))\12           (tags-str (concat (mapconcat 'identity tags \",\")))\12           (title-width (- (window-width) elfeed-goodies/feed-source-column-width\12                           elfeed-goodies/tag-column-width 4))\12\12           (tag-column (elfeed-format-column\12                        tags-str (elfeed-clamp (length tags-str)\12                                               elfeed-goodies/tag-column-width\12                                               elfeed-goodies/tag-column-width)\12                        :left))\12           (feed-column (elfeed-format-column\12                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width\12                                                  elfeed-goodies/feed-source-column-width\12                                                  elfeed-goodies/feed-source-column-width)\12                         :left)))\12\12      (insert (propertize feed-column 'face 'elfeed-search-feed-face) \" \")\12      (insert (propertize tag-column 'face 'elfeed-search-tag-face) \" \")\12      (insert (propertize title 'face title-faces 'kbd-help title))))\12\12  (defun +rss/elfeed-show-refresh--better-style ()\12    \"Update the buffer to match the selected entry, using a mail-style.\"\12    (interactive)\12    (let* ((inhibit-read-only t)\12           (title (elfeed-entry-title elfeed-show-entry))\12           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))\12           (author (elfeed-meta elfeed-show-entry :author))\12           (link (elfeed-entry-link elfeed-show-entry))\12           (tags (elfeed-entry-tags elfeed-show-entry))\12           (tagsstr (mapconcat #'symbol-name tags \", \"))\12           (nicedate (format-time-string \"%a, %e %b %Y %T %Z\" date))\12           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))\12           (type (elfeed-entry-content-type elfeed-show-entry))\12           (feed (elfeed-entry-feed elfeed-show-entry))\12           (feed-title (elfeed-feed-title feed))\12           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))\12      (erase-buffer)\12      (insert \"\\n\")\12      (insert (format \"%s\\n\\n\" (propertize title 'face 'elfeed-show-title-face)))\12      (insert (format \"%s\\t\" (propertize feed-title 'face 'elfeed-search-feed-face)))\12      (when (and author elfeed-show-entry-author)\12        (insert (format \"%s\\n\" (propertize author 'face 'elfeed-show-author-face))))\12      (insert (format \"%s\\n\\n\" (propertize nicedate 'face 'elfeed-log-date-face)))\12      (when tags\12        (insert (format \"%s\\n\"\12                        (propertize tagsstr 'face 'elfeed-search-tag-face))))\12      ;; (insert (propertize \"Link: \" 'face 'message-header-name))\12      ;; (elfeed-insert-link link link)\12      ;; (insert \"\\n\")\12      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)\12               do (insert (propertize \"Enclosure: \" 'face 'message-header-name))\12               do (elfeed-insert-link (car enclosure))\12               do (insert \"\\n\"))\12      (insert \"\\n\")\12      (if content\12          (if (eq type 'html)\12              (elfeed-insert-html content base)\12            (insert content))\12        (insert (propertize \"(empty)\\n\" 'face 'italic)))\12      (goto-char (point-min)))))\12\12(after! elfeed-show\12  (require 'url)\12\12  (defvar elfeed-pdf-dir\12    (expand-file-name \"pdfs/\"\12                      (file-name-directory (directory-file-name elfeed-enclosure-default-dir))))\12\12  (defvar elfeed-link-pdfs\12    '((\"https://www.jstatsoft.org/index.php/jss/article/view/v0\\\\([^/]+\\\\)\" . \"https://www.jstatsoft.org/index.php/jss/article/view/v0\\\\1/v\\\\1.pdf\")\12      (\"http://arxiv.org/abs/\\\\([^/]+\\\\)\" . \"https://arxiv.org/pdf/\\\\1.pdf\"))\12    \"List of alists of the form (REGEX-FOR-LINK . FORM-FOR-PDF)\")\12\12  (defun elfeed-show-pdf (entry)\12    (interactive\12     (list (or elfeed-show-entry (elfeed-search-selected :ignore-region))))\12    (let ((link (elfeed-entry-link entry))\12          (feed-name (plist-get (elfeed-feed-meta (elfeed-entry-feed entry)) :title))\12          (title (elfeed-entry-title entry))\12          (file-view-function\12           (lambda (f)\12             (when elfeed-show-entry\12               (elfeed-kill-buffer))\12             (pop-to-buffer (find-file-noselect f))))\12          pdf)\12\12      (let ((file (expand-file-name\12                   (concat (subst-char-in-string ?/ ?, title) \".pdf\")\12                   (expand-file-name (subst-char-in-string ?/ ?, feed-name)\12                                     elfeed-pdf-dir))))\12        (if (file-exists-p file)\12            (funcall file-view-function file)\12          (dolist (link-pdf elfeed-link-pdfs)\12            (when (and (string-match-p (car link-pdf) link)\12                       (not pdf))\12              (setq pdf (replace-regexp-in-string (car link-pdf) (cdr link-pdf) link))))\12          (if (not pdf)\12              (message \"No associated PDF for entry\")\12            (message \"Fetching %s\" pdf)\12            (unless (file-exists-p (file-name-directory file))\12              (make-directory (file-name-directory file) t))\12            (url-copy-file pdf file)\12            (funcall file-view-function file)))))))\12" :post-blank 1 :post-affiliated 54657 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #139#)) 0] (paragraph (:begin 54595 :end 54657 :contents-begin 54595 :contents-end 54657 :post-blank 0 :post-affiliated 54595 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #139#)) 0] #138# 0] (paragraph (:begin 47114 :end 47218 :contents-begin 47114 :contents-end 47218 :post-blank 0 :post-affiliated 47114 :mode nil :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] (section (:begin 45447 :end 45622 :contents-begin 45447 :contents-end 45621 :robust-begin 45447 :robust-end 45619 :post-blank 1 :post-affiliated 45447 :mode section :granularity element :cached t :parent #49# :org-element--cache-sync-key nil)) 0] [[[[[nil nil #55# 0] nil #140# -1] [nil nil #141# 0] #142# -1] [[[nil nil (section (:begin 74176 :end 74745 :contents-begin 74176 :contents-end 74744 :robust-begin 74176 :robust-end 74742 :post-blank 1 :post-affiliated 74176 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #59#)) 0] [nil nil #143# 0] #144# 0] [[nil nil (paragraph (:begin 74941 :end 75084 :contents-begin 74941 :contents-end 75084 :post-blank 0 :post-affiliated 74941 :mode planning :granularity element :cached t :parent #145=(section (:begin 74941 :end 75380 :contents-begin 74941 :contents-end 75379 :robust-begin 74941 :robust-end 75377 :post-blank 1 :post-affiliated 74941 :mode section :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #63# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 75084 :end 75380 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! org\12  (setq org-latex-text-markup-alist\12        '((bold . \"\\\\textbf{%s}\")\12          (code . protectedtexttt)\12          (italic . \"\\\\emph{%s}\")\12          (strike-through . \"\\\\sout{%s}\")\12          (underline . \"\\\\uline{%s}\")\12          (verbatim . verb))))\12" :post-blank 1 :post-affiliated 75084 :mode nil :granularity element :cached t :parent #145# :org-element--cache-sync-key nil)) 0] #145# 0] #59# 0] [[nil nil #146# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 77615 :end 78891 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package! lexic\12  :commands lexic-search lexic-list-dictionary\12  :config\12  (map! :map lexic-mode-map\12        :n \"q\" #'lexic-return-from-lexic\12        :nv \"RET\" #'lexic-search-word-at-point\12        :n \"a\" #'outline-show-all\12        :n \"h\" (cmd! (outline-hide-sublevels 3))\12        :n \"o\" #'lexic-toggle-entry\12        :n \"n\" #'lexic-next-entry\12        :n \"N\" (cmd! (lexic-next-entry t))\12        :n \"p\" #'lexic-previous-entry\12        :n \"P\" (cmd! (lexic-previous-entry t))\12        :n \"E\" (cmd! (lexic-return-from-lexic) ; expand\12                     (switch-to-buffer (lexic-get-buffer)))\12        :n \"M\" (cmd! (lexic-return-from-lexic) ; minimise\12                     (lexic-goto-lexic))\12        :n \"C-p\" #'lexic-search-history-backwards\12        :n \"C-n\" #'lexic-search-history-forwards\12        :n \"/\" (cmd! (call-interactively #'lexic-search))))\12\12(defadvice! +lookup/dictionary-definition-lexic (identifier &optional arg)\12  \"Look up the definition of the word at point (or selection) using `lexic-search'.\"\12  :override #'+lookup/dictionary-definition\12  (interactive\12   (list (or (doom-thing-at-point-or-region 'word)\12             (read-string \"Look up in dictionary: \"))\12         current-prefix-arg))\12  (lexic-search identifier nil nil t))\12" :post-blank 1 :post-affiliated 77615 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #147=(section (:begin 77427 :end 78891 :contents-begin 77427 :contents-end 78890 :robust-begin 77427 :robust-end 78888 :post-blank 1 :post-affiliated 77427 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #146#)))) 0] (paragraph (:begin 77427 :end 77615 :contents-begin 77427 :contents-end 77615 :post-blank 0 :post-affiliated 77427 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #147#)) 1] #147# 1] (section (:begin 75388 :end 77410 :contents-begin 75388 :contents-end 77409 :robust-begin 75388 :robust-end 77407 :post-blank 1 :post-affiliated 75388 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #63#)) -1] #148# 0] [[[[nil [nil nil (paragraph (:begin 78899 :end 79074 :contents-begin 78899 :contents-end 79074 :post-blank 0 :post-affiliated 78899 :mode planning :granularity element :cached t :parent #149=(section (:begin 78899 :end 79074 :contents-begin 78899 :contents-end 79074 :robust-begin 78899 :robust-end 79072 :post-blank 0 :post-affiliated 78899 :mode section :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #149# 1] [[[nil nil #150=(section (:begin 79087 :end 79409 :contents-begin 79087 :contents-end 79408 :robust-begin 79087 :robust-end 79406 :post-blank 1 :post-affiliated 79087 :mode section :granularity element :cached t :parent #76# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 79179 :end 79409 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package! pdf-view\12  :hook (pdf-tools-enabled . pdf-view-themed-minor-mode)\12  :config\12  (setq pdf-view-use-scaling t\12      pdf-view-use-imagemagick nil\12      pdf-view-display-size 'fit-page))\12" :post-blank 1 :post-affiliated 79179 :mode nil :granularity element :cached t :parent #150# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 79087 :end 79179 :contents-begin 79087 :contents-end 79179 :post-blank 0 :post-affiliated 79087 :mode planning :granularity element :cached t :parent #150# :org-element--cache-sync-key nil)) 0] [nil nil #152=(section (:begin 79432 :end 80867 :contents-begin 79432 :contents-end 80866 :robust-begin 79432 :robust-end 80864 :post-blank 1 :post-affiliated 79432 :mode section :granularity element :cached t :parent #151# :org-element--cache-sync-key nil)) 0] #151# -1] #76# 1] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 79515 :end 80867 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(map! :map org-mode-map\12      :localleader\12      :desc \"View exported file\" \"v\" #'org-view-output-file)\12\12(defun org-view-output-file (&optional org-file-path)\12  \"Visit buffer open on the first output file (if any) found, using `org-view-output-file-extensions'\"\12  (interactive)\12  (let* ((org-file-path (or org-file-path (buffer-file-name) \"\"))\12         (dir (file-name-directory org-file-path))\12         (basename (file-name-base org-file-path))\12         (output-file nil))\12    (dolist (ext org-view-output-file-extensions)\12      (unless output-file\12        (when (file-exists-p\12               (concat dir basename \".\" ext))\12          (setq output-file (concat dir basename \".\" ext)))))\12    (if output-file\12        (if (member (file-name-extension output-file) org-view-external-file-extensions)\12            (browse-url-xdg-open output-file)\12          (pop-to-bufferpop-to-buffer (or (find-buffer-visiting output-file)\12                                          (find-file-noselect output-file))))\12      (message \"No exported file found\"))))\12\12(defvar org-view-output-file-extensions '(\"pdf\" \"md\" \"rst\" \"txt\" \"tex\" \"html\")\12  \"Search for output files with these extensions, in order, viewing the first that matches\")\12(defvar org-view-external-file-extensions '(\"html\")\12  \"File formats that should be opened externally.\")\12" :post-blank 1 :post-affiliated 79515 :mode nil :granularity element :cached t :parent #152# :org-element--cache-sync-key nil)) 0] [nil nil #154=(section (:begin 80906 :end 82035 :contents-begin 80906 :contents-end 82034 :robust-begin 80906 :robust-end 82032 :post-blank 1 :post-affiliated 80906 :mode section :granularity element :cached t :parent #153# :org-element--cache-sync-key nil)) 0] #153# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 81084 :end 81275 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! org\12  (setq org-highlight-latex-and-related '(native script entities))\12  (add-to-list 'org-src-block-faces '(\"latex\" (:inherit default :extend t))))\12" :post-blank 1 :post-affiliated 81084 :mode nil :granularity element :cached t :parent #154# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 80906 :end 81084 :contents-begin 80906 :contents-end 81084 :post-blank 0 :post-affiliated 80906 :mode planning :granularity element :cached t :parent #154# :org-element--cache-sync-key nil)) -1] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 81383 :end 82035 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun +org-mode--fontlock-only-mode ()\12  \"Just apply org-mode's font-lock once.\"\12  (let (org-mode-hook\12        org-hide-leading-stars\12        org-hide-emphasis-markers)\12    (org-set-font-lock-defaults)\12    (font-lock-ensure))\12  (setq-local major-mode #'fundamental-mode))\12\12(defun +org-export-babel-mask-org-config (_backend)\12  \"Use `+org-mode--fontlock-only-mode' instead of `org-mode'.\"\12  (setq-local org-src-lang-modes\12              (append org-src-lang-modes\12                      (list (cons \"org\" #'+org-mode--fontlock-only)))))\12\12(add-hook 'org-export-before-processing-hook #'+org-export-babel-mask-org-config)\12" :post-blank 1 :post-affiliated 81383 :mode nil :granularity element :cached t :parent #154# :org-element--cache-sync-key nil)) 0] [nil nil #156=(section (:begin 82047 :end 82380 :contents-begin 82047 :contents-end 82379 :robust-begin 82047 :robust-end 82377 :post-blank 1 :post-affiliated 82047 :mode section :granularity element :cached t :parent #155# :org-element--cache-sync-key nil)) 0] #155# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 82133 :end 82264 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! org\12  (setq-default org-latex-pdf-process '(\"tectonic -Z shell-escape --outdir=%o %f\")))\12" :post-blank 1 :post-affiliated 82133 :mode nil :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 82047 :end 82133 :contents-begin 82047 :contents-end 82133 :post-blank 0 :post-affiliated 82047 :mode planning :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) -1] (paragraph (:begin 81275 :end 81383 :contents-begin 81275 :contents-end 81383 :post-blank 0 :post-affiliated 81275 :mode nil :granularity element :cached t :parent #154# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 79432 :end 79515 :contents-begin 79432 :contents-end 79515 :post-blank 0 :post-affiliated 79432 :mode planning :granularity element :cached t :parent #152# :org-element--cache-sync-key nil)) 0] [[[[[nil nil (latex-environment (:begin 82277 :end 82380 :value "\\begin{align*}\12  f(x) &= x^2\\\\\12  g(x) &= \\frac{1}{x}\\\\\12  F(x) &= \\int^a_b \\frac{1}{3}x^3\12\\end{align*}\12" :post-blank 1 :post-affiliated 82277 :mode nil :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) 0] [nil nil #158=(section (:begin 82393 :end 83680 :contents-begin 82393 :contents-end 83679 :robust-begin 82393 :robust-end 83677 :post-blank 1 :post-affiliated 82393 :mode section :granularity element :cached t :parent #157# :org-element--cache-sync-key nil)) 0] #157# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 82462 :end 83680 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defvar org-latex-caption-preamble \"\12\\\\usepackage{subcaption}\12\\\\usepackage[hypcap=true]{caption}\12\\\\setkomafont{caption}{\\\\sffamily\\\\small}\12\\\\setkomafont{captionlabel}{\\\\upshape\\\\bfseries}\12\\\\captionsetup{justification=raggedright,singlelinecheck=true}\12\\\\usepackage{capt-of} % required by Org\12\"\12  \"Preamble that improves captions.\")\12\12(defvar org-latex-checkbox-preamble \"\12\\\\newcommand{\\\\checkboxUnchecked}{$\\\\square$}\12\\\\newcommand{\\\\checkboxTransitive}{\\\\rlap{\\\\raisebox{-0.1ex}{\\\\hspace{0.35ex}\\\\Large\\\\textbf -}}$\\\\square$}\12\\\\newcommand{\\\\checkboxChecked}{\\\\rlap{\\\\raisebox{0.2ex}{\\\\hspace{0.35ex}\\\\scriptsize \\\\ding{52}}}$\\\\square$}\12\"\12  \"Preamble that improves checkboxes.\")\12\12(defvar org-latex-box-preamble \"\12% args = #1 Name, #2 Colour, #3 Ding, #4 Label\12\\\\newcommand{\\\\defsimplebox}[4]{%\12  \\\\definecolor{#1}{HTML}{#2}\12  \\\\newenvironment{#1}[1][]\12  {%\12    \\\\par\\\\vspace{-0.7\\\\baselineskip}%\12    \\\\textcolor{#1}{#3} \\\\textcolor{#1}{\\\\textbf{\\\\def\\\\temp{##1}\\\\ifx\\\\temp\\\\empty#4\\\\else##1\\\\fi}}%\12    \\\\vspace{-0.8\\\\baselineskip}\12    \\\\begin{addmargin}[1em]{1em}\12  }{%\12    \\\\end{addmargin}\12    \\\\vspace{-0.5\\\\baselineskip}\12  }%\12}\12\"\12  \"Preamble that provides a macro for custom boxes.\")\12" :post-blank 1 :post-affiliated 82462 :mode nil :granularity element :cached t :parent #158# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 82393 :end 82462 :contents-begin 82393 :contents-end 82462 :post-blank 0 :post-affiliated 82393 :mode planning :granularity element :cached t :parent #158# :org-element--cache-sync-key nil)) -1] [[nil nil #160=(section (:begin 83704 :end 93866 :contents-begin 83704 :contents-end 93865 :robust-begin 83704 :robust-end 93863 :post-blank 1 :post-affiliated 83704 :mode section :granularity element :cached t :parent #159# :org-element--cache-sync-key nil)) 0] nil (paragraph (:begin 83704 :end 83788 :contents-begin 83704 :contents-end 83788 :post-blank 0 :post-affiliated 83704 :mode planning :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) -1] #159# -1] [[[[nil nil (paragraph (:begin 88635 :end 88693 :contents-begin 88635 :contents-end 88692 :post-blank 1 :post-affiliated 88635 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 89958 :end 90036 :contents-begin 89958 :contents-end 90035 :post-blank 1 :post-affiliated 89958 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 88693 :end 89958 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun org-latex-detect-features (&optional buffer info)\12  \"List features from `org-latex-conditional-features' detected in BUFFER.\"\12  (let ((case-fold-search nil))\12    (with-current-buffer (or buffer (current-buffer))\12      (delete-dups\12       (mapcan (lambda (construct-feature)\12                 (when (let ((out (pcase (car construct-feature)\12                                    ((pred stringp) (car construct-feature))\12                                    ((pred functionp) (funcall (car construct-feature) info))\12                                    ((pred listp) (eval (car construct-feature)))\12                                    ((pred symbolp) (symbol-value (car construct-feature)))\12                                    (_ (user-error \"org-latex-conditional-features key %s unable to be used\" (car construct-feature))))))\12                         (if (stringp out)\12                             (save-excursion\12                               (goto-char (point-min))\12                               (re-search-forward out nil t))\12                           out))\12                   (if (listp (cdr construct-feature)) (cdr construct-feature) (list (cdr construct-feature)))))\12               org-latex-conditional-features)))))\12" :post-blank 1 :post-affiliated 88693 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 92045 :end 92097 :contents-begin 92045 :contents-end 92096 :post-blank 1 :post-affiliated 92045 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 93223 :end 93866 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defvar info--tmp nil)\12\12(defadvice! org-latex-save-info (info &optional t_ s_)\12  :before #'org-latex-make-preamble\12  (setq info--tmp info))\12\12(defadvice! org-splice-latex-header-and-generated-preamble-a (orig-fn tpl def-pkg pkg snippets-p &optional extra)\12  \"Dynamically insert preamble content based on `org-latex-conditional-preambles'.\"\12  :around #'org-splice-latex-header\12  (let ((header (funcall orig-fn tpl def-pkg pkg snippets-p extra)))\12    (if snippets-p header\12      (concat header\12              (org-latex-generate-features-preamble (org-latex-detect-features nil info--tmp))\12              \"\\n\"))))\12" :post-blank 1 :post-affiliated 93223 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 93164 :end 93223 :contents-begin 93164 :contents-end 93223 :post-blank 0 :post-affiliated 93164 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 92097 :end 93164 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun org-latex-generate-features-preamble (features)\12  \"Generate the LaTeX preamble content required to provide FEATURES.\12This is done according to `org-latex-feature-implementations'\"\12  (let ((expanded-features (org-latex-expand-features features)))\12    (concat\12     (format \"\\n%% features: %s\\n\" expanded-features)\12     (mapconcat (lambda (feature)\12                  (when-let ((snippet (plist-get (cdr (assoc feature org-latex-feature-implementations)) :snippet)))\12                    (concat\12                     (pcase snippet\12                       ((pred stringp) snippet)\12                       ((pred functionp) (funcall snippet features))\12                       ((pred listp) (eval `(let ((features ',features)) (,@snippet))))\12                       ((pred symbolp) (symbol-value snippet))\12                       (_ (user-error \"org-latex-feature-implementations :snippet value %s unable to be used\" snippet)))\12                     \"\\n\")))\12                expanded-features\12                \"\")\12     \"% end features\\n\")))\12" :post-blank 1 :post-affiliated 92097 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 90036 :end 92045 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun org-latex-expand-features (features)\12  \"For each feature in FEATURES process :requires, :when, and :prevents keywords and sort according to :order.\"\12  (dolist (feature features)\12    (unless (assoc feature org-latex-feature-implementations)\12      (error \"Feature %s not provided in org-latex-feature-implementations\" feature)))\12  (setq current features)\12  (while current\12    (when-let ((requirements (plist-get (cdr (assq (car current) org-latex-feature-implementations)) :requires)))\12      (setcdr current (if (listp requirements)\12                          (append requirements (cdr current))\12                        (cons requirements (cdr current)))))\12    (setq current (cdr current)))\12  (dolist (potential-feature\12           (append features (delq nil (mapcar (lambda (feat)\12                                                (when (plist-get (cdr feat) :eager)\12                                                  (car feat)))\12                                              org-latex-feature-implementations))))\12    (when-let ((prerequisites (plist-get (cdr (assoc potential-feature org-latex-feature-implementations)) :when)))\12      (setf features (if (if (listp prerequisites)\12                             (cl-every (lambda (preq) (memq preq features)) prerequisites)\12                           (memq prerequisites features))\12                         (append (list potential-feature) features)\12                       (delq potential-feature features)))))\12  (dolist (feature features)\12    (when-let ((prevents (plist-get (cdr (assoc feature org-latex-feature-implementations)) :prevents)))\12      (setf features (cl-set-difference features (if (listp prevents) prevents (list prevents))))))\12  (sort (delete-dups features)\12        (lambda (feat1 feat2)\12          (if (< (or (plist-get (cdr (assoc feat1 org-latex-feature-implementations)) :order) 1)\12                 (or (plist-get (cdr (assoc feat2 org-latex-feature-implementations)) :order) 1))\12              t nil))))\12" :post-blank 1 :post-affiliated 90036 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 1] [[[[nil nil #161# 0] [nil nil (paragraph (:begin 108749 :end 108966 :contents-begin 108749 :contents-end 108965 :post-blank 1 :post-affiliated 108749 :mode planning :granularity element :cached t :parent #162=(section (:begin 108749 :end 110594 :contents-begin 108749 :contents-end 110593 :robust-begin 108749 :robust-end 110591 :post-blank 1 :post-affiliated 108749 :mode section :granularity element :cached t :parent #161# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #162# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 109172 :end 110594 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(after! org\12  (defadvice! +org-latex-link (orig-fn link desc info)\12    \"Acts as `org-latex-link', but supports remote images.\"\12    :around #'org-latex-link\12    (setq o-link link\12          o-desc desc\12          o-info info)\12    (if (and (member (plist-get (cadr link) :type) '(\"http\" \"https\"))\12             (member (file-name-extension (plist-get (cadr link) :path))\12                     '(\"png\" \"jpg\" \"jpeg\" \"pdf\" \"svg\")))\12        (org-latex-link--remote link desc info)\12      (funcall orig-fn link desc info)))\12\12  (defun org-latex-link--remote (link _desc info)\12    (let* ((url (plist-get (cadr link) :raw-link))\12           (ext (file-name-extension url))\12           (target (format \"%s%s.%s\"\12                           (temporary-file-directory)\12                           (replace-regexp-in-string \"[./]\" \"-\"\12                                                     (file-name-sans-extension (substring (plist-get (cadr link) :path) 2)))\12                           ext)))\12      (unless (file-exists-p target)\12        (url-copy-file url target))\12      (setcdr link (--> (cadr link)\12                        (plist-put it :type \"file\")\12                        (plist-put it :path target)\12                        (plist-put it :raw-link (concat \"file:\" target))\12                        (list it)))\12      (concat \"% fetched from \" url \"\\n\"\12              (org-latex--inline-image link info)))))\12" :post-blank 1 :post-affiliated 109172 :mode nil :granularity element :cached t :parent #162# :org-element--cache-sync-key nil)) 0] nil #163# -1] (paragraph (:begin 108966 :end 109172 :contents-begin 108966 :contents-end 109171 :post-blank 1 :post-affiliated 108966 :mode nil :granularity element :cached t :parent #162# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 110720 :end 112085 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq org-beamer-theme \"[progressbar=foot]metropolis\"\12      org-beamer-frame-level 2)\12\12(defun org-beamer-p (info)\12  (eq 'beamer (and (plist-get info :back-end)\12                   (org-export-backend-name (plist-get info :back-end)))))\12\12(defvar org-beamer-metropolis-tweaks \"\12\\\\NewCommandCopy{\\\\moldusetheme}{\\\\usetheme}\12\\\\renewcommand*{\\\\usetheme}[2][]{\\\\moldusetheme[#1]{#2}\12  \\\\setbeamertemplate{items}{$\\\\bullet$}\12  \\\\setbeamerfont{block title}{size=\\\\normalsize, series=\\\\bfseries\\\\parbox{0pt}{\\\\rule{0pt}{4ex}}}}\12\12\\\\makeatletter\12\\\\newcommand{\\\\setmetropolislinewidth}{\12  \\\\setlength{\\\\metropolis@progressinheadfoot@linewidth}{1.2px}}\12\\\\makeatother\12\12\\\\usepackage{etoolbox}\12\\\\AtEndPreamble{\\\\setmetropolislinewidth}\12\")\12\12(add-to-list 'org-latex-conditional-features '(org-beamer-p . beamer) t)\12(add-to-list 'org-latex-feature-implementations '(beamer :requires .missing-koma :prevents (italic-quotes condensed-lists)) t)\12(add-to-list 'org-latex-feature-implementations '(.missing-koma :snippet \"\\\\usepackage{scrextend}\" :order 2) t)\12(add-to-list 'org-latex-conditional-features '((lambda (info) (and (org-beamer-p info) (string-match-p \"metropolis$\" org-beamer-theme))) . beamer-metropolis) t)\12(add-to-list 'org-latex-feature-implementations '(beamer-metropolis :requires beamer :snippet org-beamer-metropolis-tweaks :order 3) t)\12" :post-blank 0 :post-affiliated 110720 :mode nil :granularity element :cached t :parent #164=(section (:begin 110612 :end 112085 :contents-begin 110612 :contents-end 112085 :robust-begin 110612 :robust-end 112083 :post-blank 0 :post-affiliated 110612 :mode section :granularity element :cached t :parent #163# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] (paragraph (:begin 110612 :end 110720 :contents-begin 110612 :contents-end 110720 :post-blank 0 :post-affiliated 110612 :mode planning :granularity element :cached t :parent #164# :org-element--cache-sync-key nil)) 1] #164# -1] #165# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 83788 :end 88635 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defvar org-latex-italic-quotes t\12  \"Make \\\"quote\\\" environments italic.\")\12(defvar org-latex-par-sep t\12  \"Vertically seperate paragraphs, and remove indentation.\")\12\12(defvar org-latex-conditional-features\12  '((\"\\\\[\\\\[\\\\(?:file\\\\|https?\\\\):\\\\(?:[^]]\\\\|\\\\\\\\\\\\]\\\\)+?\\\\.\\\\(?:eps\\\\|pdf\\\\|png\\\\|jpeg\\\\|jpg\\\\|jbig2\\\\)\\\\]\\\\]\" . image)\12    (\"\\\\[\\\\[\\\\(?:file\\\\|https?\\\\):\\\\(?:[^]]+?\\\\|\\\\\\\\\\\\]\\\\)\\\\.svg\\\\]\\\\]\\\\|\\\\\\\\includesvg\" . svg)\12    (\"^[ \\t]*|\" . table)\12    (\"cref:\\\\|\\\\cref{\\\\|\\\\[\\\\[[^\\\\]]+\\\\]\\\\]\" . cleveref)\12    (\"[;\\\\\\\\]?\\\\b[A-Z][A-Z]+s?[^A-Za-z]\" . acronym)\12    (\"\\\\+[^ ].*[^ ]\\\\+\\\\|_[^ ].*[^ ]_\\\\|\\\\\\\\uu?line\\\\|\\\\\\\\uwave\\\\|\\\\\\\\sout\\\\|\\\\\\\\xout\\\\|\\\\\\\\dashuline\\\\|\\\\dotuline\\\\|\\\\markoverwith\" . underline)\12    (\":float wrap\" . float-wrap)\12    (\":float sideways\" . rotate)\12    (\"^[ \\t]*#\\\\+caption:\\\\|\\\\\\\\caption\" . caption)\12    (\"\\\\[\\\\[xkcd:\" . (image caption))\12    ((and org-latex-italic-quotes \"^[ \\t]*#\\\\+begin_quote\\\\|\\\\\\\\begin{quote}\") . italic-quotes)\12    (org-latex-par-sep . par-sep)\12    (\"^[ \\t]*\\\\(?:[-+*]\\\\|[0-9]+[.)]\\\\|[A-Za-z]+[.)]\\\\) \\\\[[ -X]\\\\]\" . checkbox)\12    (\"^[ \\t]*#\\\\+begin_warning\\\\|\\\\\\\\begin{warning}\" . box-warning)\12    (\"^[ \\t]*#\\\\+begin_info\\\\|\\\\\\\\begin{info}\"       . box-info)\12    (\"^[ \\t]*#\\\\+begin_success\\\\|\\\\\\\\begin{success}\" . box-success)\12    (\"^[ \\t]*#\\\\+begin_error\\\\|\\\\\\\\begin{error}\"     . box-error))\12  \"Org feature tests and associated LaTeX feature flags.\12\12Alist where the car is a test for the presense of the feature,\12and the cdr is either a single feature symbol or list of feature symbols.\12\12When a string, it is used as a regex search in the buffer.\12The feature is registered as present when there is a match.\12\12The car can also be a\12- symbol, the value of which is fetched\12- function, which is called with info as an argument\12- list, which is `eval'uated\12\12If the symbol, function, or list produces a string: that is used as a regex\12search in the buffer. Otherwise any non-nil return value will indicate the\12existance of the feature.\")\12\12(defvar org-latex-feature-implementations\12  '((image         :snippet \"\\\\usepackage{graphicx}\" :order 2)\12    (svg           :snippet \"\\\\usepackage{svg}\" :order 2)\12    (table         :snippet \"\\\\usepackage{longtable}\\n\\\\usepackage{booktabs}\" :order 2)\12    (cleveref      :snippet \"\\\\usepackage[capitalize]{cleveref}\" :order 1)\12    (underline     :snippet \"\\\\usepackage[normalem]{ulem}\" :order 0.5)\12    (float-wrap    :snippet \"\\\\usepackage{wrapfig}\" :order 2)\12    (rotate        :snippet \"\\\\usepackage{rotating}\" :order 2)\12    (caption       :snippet org-latex-caption-preamble :order 2.1)\12    (acronym       :snippet \"\\\\newcommand{\\\\acr}[1]{\\\\protect\\\\textls*[110]{\\\\scshape #1}}\\n\\\\newcommand{\\\\acrs}{\\\\protect\\\\scalebox{.91}[.84]{\\\\hspace{0.15ex}s}}\" :order 0.4)\12    (italic-quotes :snippet \"\\\\renewcommand{\\\\quote}{\\\\list{}{\\\\rightmargin\\\\leftmargin}\\\\item\\\\relax\\\\em}\\n\" :order 0.5)\12    (par-sep       :snippet \"\\\\setlength{\\\\parskip}{\\\\baselineskip}\\n\\\\setlength{\\\\parindent}{0pt}\\n\" :order 0.5)\12    (.pifont       :snippet \"\\\\usepackage{pifont}\")\12    (checkbox      :requires .pifont :order 3\12                   :snippet (concat (unless (memq 'maths features)\12                                      \"\\\\usepackage{amssymb} % provides \\\\square\")\12                                    org-latex-checkbox-preamble))\12    (.fancy-box    :requires .pifont    :snippet org-latex-box-preamble :order 3.9)\12    (box-warning   :requires .fancy-box :snippet \"\\\\defsimplebox{warning}{e66100}{\\\\ding{68}}{Warning}\" :order 4)\12    (box-info      :requires .fancy-box :snippet \"\\\\defsimplebox{info}{3584e4}{\\\\ding{68}}{Information}\" :order 4)\12    (box-success   :requires .fancy-box :snippet \"\\\\defsimplebox{success}{26a269}{\\\\ding{68}}{\\\\vspace{-\\\\baselineskip}}\" :order 4)\12    (box-error     :requires .fancy-box :snippet \"\\\\defsimplebox{error}{c01c28}{\\\\ding{68}}{Important}\" :order 4))\12  \"LaTeX features and details required to implement them.\12\12List where the car is the feature symbol, and the rest forms a plist with the\12following keys:\12- :snippet, which may be either\12  - a string which should be included in the preamble\12  - a symbol, the value of which is included in the preamble\12  - a function, which is evaluated with the list of feature flags as its\12    single argument. The result of which is included in the preamble\12  - a list, which is passed to `eval', with a list of feature flags available\12    as \\\"features\\\"\12\12- :requires, a feature or list of features that must be available\12- :when, a feature or list of features that when all available should cause this\12    to be automatically enabled.\12- :prevents, a feature or list of features that should be masked\12- :order, for when ordering is important. Lower values appear first.\12    The default is 0.\12\12Features that start with ! will be eagerly loaded, i.e. without being detected.\")\12" :post-blank 1 :post-affiliated 83788 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 1] (paragraph (:begin 82264 :end 82277 :contents-begin 82264 :contents-end 82277 :post-blank 0 :post-affiliated 82264 :mode nil :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) 1] #68# 1] #130# 1] #102# 1] nil nil 0] org-element--cache-compare)))